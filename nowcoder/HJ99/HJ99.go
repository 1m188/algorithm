/*
HJ99 自守数

描述
自守数是指这样一个自然数
x
x，其平方的尾数等于自身。更具体的说，即
x
2
x
2
  的末尾若干位恰好等于
x
x，例如：
∙

∙
2
5
2
=
625
25
2
 =625，
625
625 的末尾两位恰好是
25
25；
∙

∙
7
6
2
=
5776
76
2
 =5776，
5776
5776 的末尾两位恰好是
76
76；
∙

∙
9

37
6
2
=
87

909

376
9376
2
 =87909376，
87

909

376
87909376 的末尾四位恰好是
9

376
9376。
现在，对于给定的
n
n，请统计
0
0 到
n
n 之间的自守数个数。
输入描述：
输入一个整数
n
(
1
≦
n
≦
1
0
4
)
n(1≦n≦10
4
 ) 代表自守数的范围。
输出描述：
输出一个整数，代表
0
0 到
n
n 之间的自守数个数。
示例1
输入：
25
复制
输出：
5
复制
说明：
在这个样例中，
0
,
1
,
5
,
6
,
25
0,1,5,6,25 是自守数。
*/

package main

import (
	"fmt"
)

func main() {

	li := []int{0, 1, 5, 6, 25, 76, 376, 625, 9376}

	n := 0
	fmt.Scan(&n)
	for i := 0; i < len(li); i++ {
		if li[i] > n {
			fmt.Println(i)
			return
		}
	}
	fmt.Println(len(li))

}
