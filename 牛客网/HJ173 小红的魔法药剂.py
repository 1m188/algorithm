'''
描述
小红打算收集编号为 
1
∼
n
1∼n 的 
n
n 种魔法药剂，其中每种药剂有两种形态：红色版本与蓝色版本。

获得药剂的方式如下：
∙
 
∙ 直接购买：购买第 
i
i 种红色版本药剂需要花费 
a
i
a 
i
​
  金币；
∙
 
∙ 调配合成：若已拥有红色版本的第 
b
i
b 
i
​
  种与第 
c
i
c 
i
​
  种药剂，可调配得到蓝色版本的第 
i
i 种药剂，调配本身不额外花费金币（仅需保证两种原料存在）。

小红不关心颜色，只要求最终至少拥有 
1
∼
n
1∼n 每种药剂中的任意一种形态（红或蓝）。请计算她所需支付的最小总金币数。
输入描述：
第一行输入一个整数 
n
(
1
≦
n
≦
1
0
5
)
n(1≦n≦10 
5
 )，表示药剂种类数量。
第二行输入 
n
n 个整数 
a
1
,
a
2
,
…
,
a
n
(
1
≦
a
i
≦
1
0
4
)
a 
1
​
 ,a 
2
​
 ,…,a 
n
​
 (1≦a 
i
​
 ≦10 
4
 )，依次表示直接购买第 
i
i 种红色药剂的价格。
接下来 
n
n 行，第 
i
i 行输入两个整数 
b
i
,
c
i
(
1
≦
b
i
,
c
i
≦
n
)
b 
i
​
 ,c 
i
​
 (1≦b 
i
​
 ,c 
i
​
 ≦n)，表示合成蓝色版本第 
i
i 种药剂所需的两种红色药剂的编号。
输出描述：
输出一个整数，表示获得 
n
n 种不同药剂所需支付的最小金币数。
示例1
输入：
5
2 4 10 1 3
2 3
4 5
1 2
2 5
1 4
复制
输出：
16
复制
说明：
一种最优方案：
∙
 
∙ 直接购买第 
1
,
2
,
4
,
5
1,2,4,5 种红色药剂，花费 
2
+
4
+
1
+
3
=
10
2+4+1+3=10；
∙
 
∙ 利用红色的 
1
,
2
1,2 调配得到第 
3
3 种蓝色药剂，花费 
2
+
4
=
6
2+4=6；
最终花费 
10
+
6
=
16
10+6=16，满足拥有 
1
∼
5
1∼5 的不同药剂。
'''

n = int(input())
a = list(map(int, input().split(' ')))
b, c = [0 for _ in range(n)], [0 for _ in range(n)]
for i in range(n):
    b[i], c[i] = map(int, input().split(' '))
    b[i] -= 1
    c[i] -= 1

res = 0
for i in range(n):
    if a[i] < a[b[i]] + a[c[i]]:
        res += a[i]
    else:
        res += a[b[i]] + a[c[i]]
print(res)
